/* The problem statement can be found at the below link.*/
/* https://cses.fi/problemset/task/1666/ */
#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1e5;
int N,M;
vector<int> adj[MAXN+10];
bool visited[MAXN+10];
int rep[MAXN+10]; 

void dfs(int node){
	visited[node] = true;
	for(auto neighbour : adj[node]){
		if(!visited[neighbour]){
			dfs(neighbour);
		}
	}
}

int count_component(){
	int count = 0;
	for(int i=1;i<=N;i++){
		if(!visited[i]){
			rep[count] = i;
			count++;
			dfs(i);
		}
	} 
	return count;
}

int main(){
	cin >> N >> M;
	for(int i=0;i<M;i++){
		int u,v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	int ans = count_component();
	cout << ans-1 << "\n";
	for(int i=1;i<ans;i++){
		cout << rep[i-1] << " " << rep[i] << "\n"; 
	}
}
 

