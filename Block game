/* The problem statement can be fouond at the below link. 
http://www.usaco.org/index.php?page=viewproblem2&cpid=664 */
/* This is a partial solution. */
#include<bits/stdc++.h>
using namespace std;

int main(){
	freopen("blocks.in","r",stdin);
	freopen("blocks.out","w",stdout);
	int blocksneeded[26] = { 0 };
	int n;
	cin >> n;
	for(int i=0;i<n;i++){
		string first,second;
		cin >> first >> second;
		int first_count[26] = { 0 };
		int second_count[26] = { 0 };
		int first_size = first.size();
		int second_size = second.size();
		for(int j=0;j<first_size;j++){
			int index = first[j] - 'a';
			first_count[index]++;
		}
		for(int j=0;j<second_size;j++){
			int index = second[j] - 'a';
			second_count[index]++;
		}
		for(int j=0;j<26;j++){
			blocksneeded[j] += max(first_count[j],second_count[j]);
		}
	}
	for(int i=0;i<26;i++){
		cout << blocksneeded[i] << "\n";
	}
	return 0;
}
/* When there are many possibilities think of the logical pattern of the possibilities and interpret that pattern in terms of the problem statement. 
When there is kinda of like weird inputs then think of manupulating those inputs interactively like done in this solution,when the first input came 
we work on that input immediately before going for the next input. This is also considered as interactive solution. */
 
