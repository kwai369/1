/* The problem statement can be found at the below link. 
http://www.usaco.org/index.php?page=viewproblem2&cpid=917 
The first solution is the solution not produced by us and the second solution is the solution produced by us.
Solution 1:-*/
#include<bits/stdc++.h>
using namespace std;

int main(){
	freopen("traffic.in","r",stdin);
	freopen("traffic.out","w",stdout);
	int n;
	cin >> n;
	vector<int> l(n),u(n),ramp(n);
	string s;
	for(int i=0;i<n;i++){
		cin >> s >> l[i] >> u[i];
		if(s == "on"){
			ramp[i] = 1;
		} 
		else if(s == "off"){
			ramp[i] = 0;
		}
		else{
			ramp[i] = 2;
		}
	}
	int nl = -999999999,nu = 999999999;
	for(int i=0;i<n;i++){
		if(ramp[i]==0){
			nl -= u[i];
			nu -= l[i];
			nl = max(0,nl);// So that nl is always non-negative.
		}
		else if(ramp[i]==1){
			nl += l[i]; // Refers to the second mistake
			nu += u[i]; // Refers to the second mistake
			
		}
		else{
			nl = max(nl,l[i]);
			nu = min(nu,u[i]);
		}
	}
	int il = -999999999,iu = 999999999;
	for(int i=(n-1);i>=0;i--){
		if(ramp[i]==0){
			il += l[i];// Refers to the second mistake
			iu += u[i];// Refers to the second mistake
		}
		else if(ramp[i]==1){
			il -= u[i];
			iu -= l[i];
			il = max(0,il);// So that il is always non-negative.
		}
		else{
			il = max(il,l[i]);
			iu = min(iu,u[i]);
		}
	}	
	cout << il << " " << iu << "\n" << nl << " " << nu;
	return 0;
}
Solution 2:-
#include<bits/stdc++.h>
using namespace std;

int main(){
	freopen("traffic.in","r",stdin);
	freopen("traffic.out","w",stdout);
	int n,j=0;
	cin >> n;
	vector<int> l(n),u(n),ramp(n);
	string s;
	int n1,n2;
	for(int i=0;i<n;i++){
		cin >> s >> l[i] >> u[i];
		if(s == "on"){
			ramp[i] = 1;
		} 
		else if(s == "off"){
			ramp[i] = 0;
		}
		else{
			ramp[i] = 2;
			j++;
			if(j==1){
				n1 = i;
			}
			n2 = i;
		}		
	}
	
	int nl = l[n1],nu = u[n1],il = l[n2],iu = u[n2];
	for(int i=(n1+1);i<n;i++){
		if(ramp[i]==0){
			nl -= u[i];
			nu -= l[i];
		
		}
		else if(ramp[i]==1){
			nl += u[i];
			nu += l[i];
		}
		else{
			nl = max(nl,l[i]);
			nu = min(nu,u[i]);
		}
	}
	for(int i=(n2-1);i>=0;i--){
		if(ramp[i]==0){
			il += u[i];
			iu += l[i];
		}
		else if(ramp[i]==1){
			il -= u[i];
			iu -= l[i];
		}
		else{
			il = max(il,l[i]);
			iu = min(iu,u[i]);
		}
	}
	if(il<0){
		il = 0;
	}
	if(iu<0){
		iu = 0;
	}
	if(nl<0){
		nl = 0;
	}
	if(nu<0){
		nu = 0;
	}
	cout << il << " " << iu << "\n" << nl << " " << nu;
	return 0;
}
/* Testcases comparision. 
-> The first solution satisfies all the testcases but the second solution satisfies only two testcases. 
Mistakes in second solution.
-> The second solution don't consider all the n segments which is to be consider according to the interpretation of problem statement which the first solution does by iterating over all n segments.
	-> Interpret the logic of the code in terms of the logic of the problem statement not on the pattern that appears in the testcases.
-> Second solution is not able to interpret the precise pattern of the testcases. Which the first solution does. */
 

